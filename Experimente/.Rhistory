(10-24.4)^2+(30-24.4)
20*4+4*30+60
260/9
dim(d)
check.c7
dim(d)
dim(d1)
dim(d2)
unique(d$cond)
dim(d)
dim(d)
dim(d.rc)
dim(d.arg)
colnames(d.arg)
head(d.arg,1)
head(d.rc,1)
d2 <- d.rc
head(d2[,colnames])
head(d2)
colnames[1:2]
head(d.rc)
head(d.rc)
dim(d)
dim(d.rc)
dim(d1)
dim(d2)
dim(d)
head(d)
head(d)
d <- d2
dim(d2)
head(d2)
head(d)
dim(d)
d2 <- d
dim(d2)
dim(d2)
dim(d2)
d <- d2
dim(d)
check.c1(d)
check.c1(d, T)
check.c1(6, T)
check.c2(d, T)
dim(d)
unique(cond)
head(d,1)
check.c3
check.c6
check.c5
dim(d1)
dim(d2)
dim(d)
unique(d$cond)
unique(d$exp.cond)
x <- paste(d$exp, d$cond)
d$exp.cond <- x
check.c3
2
2^4
x
head(d.new)
nrow(d.new)
tail(d.new)
unique(d$exp.item)
unique(d$exp.item)
head(y)
tail(y)
dim(y)
dim(d)
x
dim(y)
dim(x)
tail(y)
784-749
head(d)
head(d.new)
head(d, 55)
head(d.new,55)
head(d.new,55)
head(d)
head(d.ew)
head(d.new)
head(.new)
head(d.new)
head(d.new)
head(d.new)
head(d)
head(d.new)
head(d)
head(d.new)
head(d.new)
head(d.new)
?write.table
head(d.new)
c(paste('Pause', i 'von', 15) , rep('', ncol(d)-1))
i <- 1
c(paste('Pause', i 'von', 15) , rep('', ncol(d)-1))
paste('Pause', i 'von', 15) , rep('', ncol(d)-1))
head(d.new)
dim(d.new)
head(d.new)
head(d)
head(d)
sys.time
os.time
time()
time(1)
time(min(d$time))
min(d$time)
time(min(d$time[d$time>0]))
min(d$time[d$time>0])
head(d)
min(d$time)
min(d$time)
d$time==-1
d$time[d$time==-1]
summary(d$time)
head(d$time)
head(d)
head(d.resp)
head(d.resp)
head(d)
head(d)
head(d)
head(d.resp)
head(d.resp)
head(x)
head(d.resp)
head(d,20)
head(d.resp,20)
head(d.resp)
summary(d.resp$RT)
head(d.resp)
head(d.resp)
head(d.resp)
head(d.resp)
d.resp.rc
condition
condition
condition
d.resp.means
unique(d.resp.means$condition)
unique(d$condition)
unique(d$condition)
d.resp.rc
unique(d$d$condition)
unique(d$condition)
d.resp.rc
q()
))
800/3
2*800/3
head(d)
head(d)
head(d)
dim(d)
while(TRUE) {
 for(i in 1:1000) {
  d.new <- generate.new.candidate(d, c(), num=3)#c(2.5,6.49))
  violation <- check.constraints(d.new, enabled.constraints)
  if(all( violation <= violations[nrow(violations),] )) {
    violations <- rbind(violations, violation)
    d <- d.new
    if(do.plot==T) {
      par(mfrow=c(3,3))
      plot(violations[,1]); plot(nrow(d)-violations[,2]/nrow(d));
      plot(violations[,3]); plot(violations[,4])
      plot(violations[,5]); plot(violations[,6]);
      plot(violations[,7]); plot(violations[,8]); plot(violations[,9]);
    }
  }
 }
 write.table(d, file="items_all_almost_optimized")
 print("wrote to disk")
}
warnings()
head(d.new)
head(x)
head(d)
head(x)
warnings()
head(d.new)
head(d.new)
head(d$V11)
head(d,1)
head(d.new)
rgamma
stats::rgamma
head(x)
head(x)
x
x
x
head(x)
head(x)
tail(x)
head(x)
head(data)
head(sdt)
cnt
amb
amb
amb
sdt
head(sdt)
amb
cnt
params
params$att1.params1
params
params$att2.params1
params$att2.params1
n.trials <- 200
estimate.discrimination
params$p.try.next <- .2
data <- simulate.discrimination(params, one.trial.serial, times.eval=0:20*100, n.trials=1000)
data
one.trial <- one.trial.parallel
data
one.trial
one.trial <- one.trial.parallel
one.trial <- one.trial.parallel
(dgamma(t, shape=params['shape'], rate=params['rate'])+params[['shift']])
params
params$att1.params
.22*.22
params
params$attachment1[['p.errWhenAvailable']]
ifelse(att1=0, (1-params$att1.params[['p.errWhenAvailable']]),
ifelse(att1=0, (1-params$att1.params[['p.errWhenAvailable']]), params$att1.params[['p.errWhenUnavailable']])

)
ifelse(0, (1-params$att1.params[['p.errWhenAvailable']]), params$att1.params[['p.errWhenUnavailable']])
ifelse(1, (1-params$att1.params[['p.errWhenAvailable']]), params$att1.params[['p.errWhenUnavailable']])
params
params

      params                        
d <- d8
prob.yes.serial
(c(a=1))[['a']]
warnings()
x <- c(a=1)
x['b']
x['b'] < 1
any(x['b'] < 1)
any(x[c('b','a')] < 1)
any(x[c('b','a')] < 1, na.rm=T)
any(x[c('b','a')] < 1, na.rm=T)
any(x[c('b')] < 1, na.rm=T)
warnings()
data
)
res
params
rs
res
res
res
prob.yes.serial(500, 0, 0, new.params)
prob.yes.serial(1000, 0, 0, new.params)
new.params
new.params
res
head(d.resp)
head( amb$responseGrammatical)
head( d.resp$responseGrammatical)
res
res
res
d <- rbind(d8, d19)

dprime.var <- function(hits, fas, misses, crs, flat.min=1) {
  # 'correct' possible probabilites of 1  
  n.signal <- hits+misses; n.noise <- fas+crs
  if(n.signal < n.noise) {
    hits <- hits+flat.min; misses <- misses+flat.min;
    fas <- fas+flat.min*(n.noise/n.signal); crs <- crs+flat.min*(n.noise/n.signal);
  } else {
    hits <- hits+flat.min*(n.signal/n.noise); misses <- misses+flat.min*(n.noise/n.signal);
    fas <- fas+flat.min; crs <- crs+flat.min;
  }
  n.signal <- hits+misses; n.noise <- fas+crs

  print(c(hits, fas, misses, crs))
  p.hit <- hits/n.signal
  p.CR <- crs/n.noise
  dbar <- qnorm(p.hit)-qnorm(1-p.CR)
  c    <- -0.5*(qnorm(p.hit)+qnorm(1-p.CR))
  d.var <- ( p.hit*(1-p.hit) )/ ( n.signal*dnorm(qnorm(p.hit))^2 ) +
         ( p.CR*(1-p.CR) )/ ( n.noise*dnorm(qnorm(p.CR))^2 )
print(dbar)
  c(d=dbar, d.var=d.var, c=c, c.var=d.var*0.25)
}

res
res
res
res
new.params
res
res
d <- rbind(d8, d19, d20)
prob.yes.serial
prob.yes.serial.one.branch
new.params
res
prob.yes.serial
head(data.serial)
head(data)
head(data)
params
)
x
x
par(ask=F)
res
)
res
res
new.params
3.281530e+05
res
new.params
p2logodds(1)
logodds2p(p2logodds(1))
logodds2p(p2logodds(.999))
x <- c(a=1, b=2, d=3)
as.list(x)
"a" %in% as.list(x)
"a" %in% names(as.list(x))
new.params
res
res
new.params
new.params
new.params
new.params
res
new.params
amb.yes(1000)
prob.yes.parallel
head(FitSerial)
res$params
res$res
res$res
res$res
res$params
res$params
res.parallel <- res
head(d.resp.rc)
head(d.resp.rc,1)
res.parallel$params
library(intervals)
library(Intervals)
library(Interval)
library(interval)
lower <- 0:13*.4
upper <- lower+.4

upper
length(upper)
upper[14]
y
y
y
y
y
d <- rbind(d24, d25)
head(d.resp)
traceback()
head(d.resp)
d <- rbind(d23,d24,d25)
params
params
params
params
params
params
params
params
params
params
print(params)
"att1.param","att1.param")%in%c('dprime','accuracy')
c("att1.param","att1.param")%in%c('dprime','accuracy')
prob.yes.serial
params
params
params
params
pste
paste
params
traceback()
params
.4*.6
params
res.serial$params
res.serial <- FitSerialModel(data=subset(d.resp, subject==1024 & experiment=="RACE.RC" & !is.na(interval) & !is.na(responseGrammatical)), print.logLik=T)
res.serial$params
res.serial$res1$par
res.serial$params
res.serial$res1$par
exp(res.serial$res1$par)
log(2e-2)
params
params
params
init.params1
res1
AssignParameters
params
data[1,]
data[1,]
data=data[100,]
data
data[200,]
data[2,]
data[2,]
data[2,]
data[2,]
data[2,'time']*1000
data[2,'time']
exp(log(10))
exp(log(0))
log(0)
.01^10
att1.params <- c(shape=18, scale=1126, shift=.23,
                 p.errWhenAvailable=.1, p.errWhenUnavailable=.1)
params
head(data)
params
res.serial$params
p
params
params
ComparePredictions
params
params
params
params
params
params
params
traceback()
res.serial$params
data=subset(d.resp, subject==1023 & experiment=="RACE.RC" & !is.na(interval) & !is.na(responseGrammatical)
)
p.GuessYes
p.errWhenAvailable
p.errWhenUnavailable
params
head(FitModel)
)
res.serial$params
head(FitParallelModel)
unique(d$subject)
d <- rbind(d, d26)
res.serial$params
head(AssignParameters)
params
params
model.fits$'1018'$res6$par
model.fits$'1018'$serial$res6$par
params
params
model.fits$'1018'$serial$res5$value
model.fits$'1018'$serial$res6$par
AssignParameters(model.fits$'1018'$serial$res6$par, params)
logodds2p(714.4255394)
logodds2p(714.)
logodds2p(713)
logodds2p(72)
logodds2p(700)
logodds2p(710)
logodds2p(700)
p2logodds(logodds2p(1))
p2logodds(logodds2p(2))
logodds2p(2)
logodds2p( p2logodds(2))
p2logodds(2)
p2logodds(1.1)
p2logodds(1.00001)
p2logodds(1.000000000000000000001)
p2logodds(.999999999999)
p2logodds(.999999999999999999999)
p2logodds(.9999999999999999999)
p2logodds(.999999999999999999)
p2logodds(.9999999999999999)
p2logodds(.99999999999999999)
FitModel
mAIC
mAIC[,c('subject','sm3','pm3')]
mAIC
mAIC[mAIC$subject==1015]
mAIC[mAIC$subject==1015,]
)
)
FitModel
